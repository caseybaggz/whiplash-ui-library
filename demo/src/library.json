[
  {
    "name": "Breadcrumb",
    "description": "A breadcrumb nav list for apps with and without use of React-Router",
    "component": "<Breadcrumb router list={ anArrayOfObjects }  />",
    "group": "layout",
    "props": [
      {
        "name": "bgColor (optional)",
        "type": "String",
        "default": "transparent",
        "description": "Component background color variation."
      },
      {
        "name": "list",
        "type": "Array of Objects",
        "default": "[]",
        "description": "[{ name: 'home', url: '/' }, { name: 'details', url: '/home/details' }]"
      },
      {
        "name": "router (optional)",
        "type": "Boolean",
        "default": "false",
        "description": "Allow compbatability with React-Router navigation."
      }
    ],
    "notes": ""
  },
  {
    "name": "Button",
    "description": "No need for description...",
    "component": "<Button type=\"button\" buttonText=\"secondary-dark\" callback={ this._clickButton } />",
    "group": "layout",
    "props": [
      {
        "name": "buttonText",
        "type": "String",
        "default": "do it",
        "description": "Component text contents (value)"
      },
      {
        "name": "callback (optional)",
        "type": "Function",
        "default": "",
        "description": "Function that returns the Event Obj of Component onClick."
      },
      {
        "name": "loading (optional)",
        "type": "Boolean",
        "default": "false",
        "description": "Will show a loading animation in Component content if true."
      },
      {
        "name": "theme (optional)",
        "type": "String",
        "default": "default",
        "description": "Available Themes: default (no theme prop), secondary-border, secondary-dark, text-link, danger"
      }
    ],
    "notes": "Component also passes down all button related props given (i.e. type, id, autofocus, etc.)."
  },
  {
    "name": "CheckButton",
    "description": "A nice checkbox-style element that toggles a bool state.",
    "component": "<CheckButton checked name=\"accept_emails\" onClick={ updateState } />",
    "group": "forms",
    "props": [
      {
        "name": "defaultChecked (optional)",
        "type": "Boolean",
        "default": "false",
        "description": "Component checked value"
      },
      {
        "name": "checked (optional)",
        "type": "Boolean",
        "default": "false",
        "description": "Component checked value"
      }
    ],
    "notes": "Component also passes down all input & React props given for the ability to control state of a radio group if needed."
  },
  {
    "name": "DatePicker",
    "description": "A date selection-based element to use in forms.",
    "component": "<DatePicker labelText=\"from\" onDayClick={ doSomething } />",
    "group": "forms",
    "props": [
      {
        "name": "labelText (optional)",
        "type": "String",
        "default": "",
        "description": "Gives Component a label tag for display."
      },
      {
        "name": "onDayClick",
        "type": "Function",
        "default": "returns (e, day)",
        "description": "Returns the Event and moment.js Obj for the day selected onClick."
      }
    ],
    "notes": "This Component also passes down any other props given to the input element for form purposes."
  },
  {
    "name": "DotLoader",
    "description": "An inline loading animation to display in the view.",
    "component": "<DotLoader />",
    "group": "layout",
    "props": [],
    "notes": "Not much to say...just drop it in."
  },
  {
    "name": "Dropdown",
    "description": "A dropdown-based element that display's its children.",
    "component": "<Dropdown right open={ this.state.dropdownActive }><a href=\"#\">Home</a></Dropdown>",
    "group": "forms",
    "props": [
      {
        "name": "left (optional)",
        "type": "Bool",
        "default": "false",
        "description": "Component positioning"
      },
      {
        "name": "open",
        "type": "Bool",
        "default": "false",
        "description": "Component visibility"
      },
      {
        "name": "right (optional)",
        "type": "Bool",
        "default": "false",
        "description": "Component positioning"
      }
    ],
    "notes": "Make sure you set a property of 'position: relative' on the conatiner element."
  },
  {
    "name": "Icons",
    "description": "Whiplash basic icon library",
    "component": "<Icon name=\"add\" color=\"#303030\" />",
    "group": "icons",
    "props": [
      {
        "name": "color (optional)",
        "type": "String",
        "default": "#646471",
        "description": "Component fill/stroke styling"
      },
      {
        "name": "name",
        "type": "String",
        "default": "",
        "description": "Component icon name"
      },
      {
        "name": "height (optional)",
        "type": "String",
        "default": "24",
        "description": "Component height style restriction."
      },
      {
        "name": "width (optional)",
        "type": "String",
        "default": "24",
        "description": "Component width style restriction."
      }
    ],
    "notes": "This Component will also stack children as shown if given."
  },
  {
    "name": "Image",
    "description": "An img-based Component to help lazy-load images elegantly.",
    "component": "<Image alt=\"harry selfie\" onError={ this._handleError } src={ realImg } />",
    "group": "layout",
    "props": [
      {
        "name": "src",
        "type": "String",
        "default": "null",
        "description": "Component content (if left out, Component will return null)."
      }
    ],
    "notes": "Component also passes down all img related props given. For a bonus, wrap this component in a div and giv it a 'placeholder' background image to display while loading."
  },
  {
    "name": "InformationalIcons",
    "description": "Whiplash informational icon library",
    "component": "<InformationalIcon name=\"whiplash\" color=\"#303030\" height=\"26\" width=\"26\" />",
    "group": "icons",
    "props": [
      {
        "name": "color (optional)",
        "type": "String",
        "default": "#646471",
        "description": "Component fill/stroke styling"
      },
      {
        "name": "name",
        "type": "String",
        "default": "",
        "description": "Component icon name"
      },
      {
        "name": "height (optional)",
        "type": "String",
        "default": "24",
        "description": "Component height style restriction."
      },
      {
        "name": "width (optional)",
        "type": "String",
        "default": "24",
        "description": "Component width style restriction."
      }
    ],
    "notes": "This Component will also stack children as shown if given."
  },
  {
    "name": "Input",
    "description": "An input that displays either a animating (default) or basic style theme in your forms.",
    "component": "<Input basic inputLabel=\"email\" type=\"email\" placeholder=\"email@example.com\" onUserInput={ this._textInput } required />",
    "group": "forms",
    "props": [
      {
        "name": "basic (optional)",
        "type": "Boolean",
        "default": "false",
        "description": "Component traditional non-animated styling."
      },
      {
        "name": "inputLabel",
        "type": "String",
        "default": "",
        "description": "Component label text context."
      },
      {
        "name": "onUserInput",
        "type": "Function",
        "default": "",
        "description": "Returns input value onChange (check your console to see work)."
      },
      {
        "name": "search (optional)",
        "type": "Boolean",
        "default": "false",
        "description": "Display a search based styled Component."
      }
    ],
    "notes": "Component also passes down all input related props given."
  },
  {
    "name": "Legend",
    "description": "A visual used to display a page indicator of where the user is located or something similar.",
    "component": "<Legend activeIndex=\"3\" totalPages=\"4\" callback={ this.updateActiveIndex } />",
    "group": "layout",
    "props": [
      {
        "name": "activeIndex",
        "type": "String",
        "default": "",
        "description": "Component styling for active index related dot in group."
      },
      {
        "name": "callback (optional)",
        "type": "Function",
        "default": "",
        "description": "Returns the index of dot user selected onClick."
      },
      {
        "name": "color (optional)",
        "type": "String",
        "default": "#8071FE",
        "description": "Component styling for active index color."
      },
      {
        "name": "total",
        "type": "String",
        "default": "",
        "description": "Tells Component how many dots to create."
      }
    ],
    "notes": ""
  },
  {
    "name": "Modal",
    "description": "A way to have dynamic modals within your app triggered from it's active property.",
    "component": "<Modal active={ this.state.modalActive } content={ this.state.modalContent } onCloseModal={ this._toggleModal } />",
    "group": "notifiers",
    "props": [
      {
        "name": "active",
        "type": "Boolean",
        "default": "false",
        "description": "Controls Component visibility."
      },
      {
        "name": "content",
        "type": "String/React Element",
        "default": "null",
        "description": "Displays value into the 'feature' section of Component."
      },
      {
        "name": "onCloseModal",
        "type": "Function",
        "default": "",
        "description": "Returns 'false' when Component close triggered fired onClick."
      }
    ],
    "notes": "Pressing 'esc' key will also close Modal."
  },
  {
    "name": "Navicon",
    "description": "A button for mobile or desktop devices that show a toggled state",
    "component": "<Navicon barColor=\"#303030\" onUserClick={ this._toggleNavicon } />",
    "group": "layout",
    "props": [
      {
        "name": "barColor (optional)",
        "type": "String",
        "default": "#303030",
        "description": "Controls Component bar color styles."
      },
      {
        "name": "onUserClick",
        "type": "Function",
        "default": "",
        "description": "Returns active state Boolean onClick (check console to see this work)."
      }
    ],
    "notes": "The Navicon Component is absolutely positioned so be sure to put it in a relative positioned container if needed."
  },
  {
    "name": "NavLink",
    "description": "A react-router Link-based Component for navigating to specific routes.",
    "component": "<NavLink to=\"/orders\">orders</NavLink>",
    "group": "navigation",
    "props": [
      {
        "name": "to",
        "type": "String",
        "default": "",
        "description": "Tells Component where to navigate onClick."
      }
    ],
    "notes": "Component also passes down all props given and accepts children."
  },
  {
    "name": "NotificationToast",
    "description": "A visual that is used to represent a flash/toast/notification for small messages in the UI.",
    "component": "<NotificationToast active theme=\"error\" message=\"Oh, no! Looks like we weren't able to add your items\" />",
    "group": "notifiers",
    "props": [
      {
        "name": "active",
        "type": "Boolean",
        "default": "false",
        "description": "Controls Component visiblility."
      },
      {
        "name": "message",
        "type": "String",
        "default": "add your notification message prop",
        "description": "Displays value in Component feature section."
      },
      {
        "name": "theme (optional)",
        "type": "String",
        "default": "",
        "description": "Available themes: default (no theme prop), pending, error"
      }
    ],
    "notes": ""
  },
  {
    "name": "SelectBox",
    "description": "A select-based element which represents a control that provides a menu of options.",
    "component": "<SelectBox form label=\"select item\" list={ listArr } callback={ this._updateSelection } name=\"items\" required />",
    "group": "forms",
    "props": [
      {
        "name": "callback",
        "type": "Function",
        "default": "",
        "description": "Returns text and value (if provided) of selected option onClick (check your console)."
      },
      {
        "name": "form (optional)",
        "type": "Boolean",
        "default": "false",
        "description": "Adds a hidden input element in Component if true."
      },
      {
        "name": "label (optional)",
        "type": "String",
        "default": "null",
        "description": "Adds a label tag above Component if given."
      },
      {
        "name": "list (optional format 1)",
        "type": "Array",
        "default": "[]",
        "description": "Format: [ 'item 1', 'item 2' ] (if no list prop given, Component will return null)."
      },
      {
        "name": "list (optional format 2)",
        "type": "Array",
        "default": "[]",
        "description": "Format: [{ text: 'Option 1, value: 1 }, { text: 'Option 2', value: 2 }] (if no list prop given, Component will return null)."
      }
    ],
    "notes": "Component also passes down all select related props given if needed for form purposes."
  },
  {
    "name": "Table",
    "description": "A table-based element used to display data.",
    "component": "<Table>{ ... }</Table>",
    "group": "layout",
    "props": [
      {
        "name": "inverted (optional)",
        "type": "Boolean",
        "default": "false",
        "description": "Gives the Component an alternate inverted style."
      }
    ],
    "notes": "Just add in all your normal table child elements and you are good. Component also passes down any props given."
  },
  {
    "name": "Textarea",
    "description": "A textarea input used for forms.",
    "component": "<Textarea inputLabel=\"Add a Note\" placeholder=\"Write something...\" required rows=\"10\" />",
    "group": "forms",
    "props": [
      {
        "name": "inputLabel (optional)",
        "type": "String",
        "default": "null",
        "description": "Adds a label to Component if needed."
      }
    ],
    "notes": "Component also passes down all props given to textarea."
  },
  {
    "name": "Toggle",
    "description": "A checkbox-based input used to visualize a toggle option in a form.",
    "component": "<Toggle active callack={ this._doSomething } name=\"animagus\" />",
    "group": "forms",
    "props": [
      {
        "name": "active",
        "type": "Boolean",
        "default": "false",
        "description": "Controls selected state & defaultChecked state for Component."
      },
      {
        "name": "callback",
        "type": "Function",
        "default": "",
        "description": "Returns the defaultChecked value onClick."
      }
    ],
    "notes": "Component also passes down all props given to input."
  }
]
